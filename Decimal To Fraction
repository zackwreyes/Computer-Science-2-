package decimal;
import java.math.BigInteger;
import java.util.Scanner;

public class decimal_main {

	public static void main(String[] args) {

		Scanner decimal_scanner = new Scanner(System.in);
		System.out.println("Please enter a deciaml number");
		String[] decimal_Scanner = decimal_scanner.nextLine().split("[.]");
		
		// Create a Rational object of the integer part of the decimal number
				Rational rationalNumerator = new Rational(new BigInteger(decimal_Scanner[0]), BigInteger.ONE);

				// Create a Rational object of the fractional part of the decimal number
				Rational rationalDenominator = new Rational(new BigInteger(decimal_Scanner[1]), new BigInteger(
						String.valueOf((int)Math.pow(10, decimal_Scanner[1].length()))));

				// Display fraction number
				System.out.println("The fraction number is " + 
						(decimal_Scanner[0].charAt(0) == '-' ? (rationalNumerator).subtract(rationalDenominator) : (rationalNumerator).add(rationalDenominator)));
	}
}



Part two


package decimal;

import java.math.BigInteger;

public class Rational extends Number implements Comparable {

	
	// Data fields for numerator and denominator
		private BigInteger[] RationalArray = new BigInteger[2];

		/** Construct a rational with specific numerator and denominator */
		public Rational(BigInteger numerator, BigInteger denominator) {
			BigInteger gcd = gcd(numerator, denominator);
			RationalArray[0] = (denominator.compareTo(BigInteger.ZERO) > 0
					? BigInteger.ONE : new BigInteger("-1")).multiply(
							numerator.divide(gcd));
			RationalArray[1] = denominator.divide(gcd);
		}

		/** Find GCD of two numbers */
		private static BigInteger gcd(BigInteger n, BigInteger d) {
			BigInteger n1 = n;
			BigInteger n2 = d;
			BigInteger gcd = BigInteger.ONE;

			for (BigInteger k = BigInteger.ONE; 
					k.compareTo(n1) <= 0 && k.compareTo(n2) <= 0; 
					k = k.add(BigInteger.ONE)) {
				if (n1.remainder(k).compareTo(BigInteger.ZERO) == 0 && 
						n2.remainder(k).compareTo(BigInteger.ZERO) == 0)
					gcd = k;
			}

			return gcd;
		}

		// Return numerator
		public BigInteger getNumerator() {
			return RationalArray[0];
		}

		// Return denominator
		public BigInteger getDenominator() {
			return RationalArray[1];
		}

		// Add a rational number to this rational
		public Rational add(Rational secondRational) {
			BigInteger n = (RationalArray[0].multiply(secondRational.getDenominator())).add(
					RationalArray[1].multiply(secondRational.getNumerator()));
			BigInteger d = RationalArray[1].multiply(secondRational.getDenominator());
			return new Rational(n, d);
		}

		// Subtract a rational number from this rational
		public Rational subtract(Rational secondRational) {
			BigInteger n = (RationalArray[0].multiply(secondRational.getDenominator())).subtract(
					RationalArray[1].multiply(secondRational.getNumerator()));
			BigInteger d = RationalArray[1].multiply(secondRational.getDenominator());
			return new Rational(n, d);
		}

		// Multiply a rational number by this rational
		public Rational multiply(Rational secondRational) {
			BigInteger n = RationalArray[0].multiply(secondRational.getNumerator());
			BigInteger d = RationalArray[1].multiply(secondRational.getDenominator());
			return new Rational(n, d);
		}

		// Divide a rational number by this rational
		public Rational divide(Rational secondRational) {
			BigInteger n = RationalArray[0].multiply(secondRational.getDenominator());
			BigInteger d = RationalArray[1].multiply(secondRational.getNumerator());
			return new Rational(n, d);
		}

		@Override
		public String toString() {
			if (RationalArray[1].compareTo(BigInteger.ONE) == 0)
				return RationalArray[0] + "";
			else
				return RationalArray[0] + "/" + RationalArray[1];
		}

		@Override // Override the equals method in the Object class
		public boolean equals(Object other) {
			if (((this.subtract((Rational)(other))).getNumerator()).compareTo(
					BigInteger.ZERO) == 0)
				return true;
			else
				return false;
		}

		@Override // Implement the abstract intValue method in Number
		public int intValue() {
			return (int)doubleValue();
		}

		@Override // Implement the abstract floatValue method in Number
		public float floatValue() {
			return (float)doubleValue();
		}

		@Override // Implement the doubleValue method in Number
		public double doubleValue() {
			return this.getNumerator().doubleValue() / 
					this.getDenominator().doubleValue();
		}

		@Override // Implement the abstract longValue method in Number
		public long longValue() {
			return (long)doubleValue();
		}

		@Override
		public int compareTo(Object o) {
			BigInteger n = this.subtract((Rational)o).getNumerator();
			if (n.compareTo(BigInteger.ZERO) > 0)
				return 1;
			else if (n.compareTo(BigInteger.ZERO) < 0)
				return -1;
			else
				return 0;
		}
	}
